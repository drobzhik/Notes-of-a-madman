from airflow import DAG
from airflow.providers.postgres.hooks.postgres import PostgresHook
from airflow.operators.python import PythonOperator
from datetime import datetime
import pandas as pd
from pymongo import MongoClient
import logging
from airflow.decorators import task

def test_connection_postgres():
    hook = PostgresHook(postgres_conn_id='psql_id')
    try:
        conn = hook.get_conn()
        logging.info('PostgreSQL connection successful')
    except Exception as e:
        logging.error(f'PostgreSQL connection failed: {e}')
        raise
    finally:
        if 'conn' in locals():
            conn.close()

def test_connection_mongodb():
    try:
        client = MongoClient("mongodb://localhost:27017/")  # Update with your connection string
        # Test the connection
        client.server_info()
        logging.info('MongoDB connection successful')
    except Exception as e:
        logging.error(f'MongoDB connection failed: {e}')
        raise
    finally:
        if 'client' in locals():
            client.close()

def fetch_df_data(**kwargs):
    hook = PostgresHook(postgres_conn_id='psql_id')
    with hook.get_conn() as conn:
        df = pd.read_sql(sql='SELECT * FROM "df";', con=conn)
    # Push to XCom

    kwargs['ti'].xcom_push(key='df', value=df.to_json())

def preprocess_df_data(**kwargs):
    ti = kwargs['ti']

    df = ti.xcom_pull(task_ids='fetch_df_data', key='df')
    
    df = pd.read_json(payables_json)
    
    ti.xcom_push(key='processed_df', value=df2.to_json())

def save_to_mongodb(**kwargs):
    ti = kwargs['ti']
    # Pull processed data from XCom
    receivables_json = ti.xcom_pull(task_ids='preprocess_receivables', key='processed_receivables')
    payables_json = ti.xcom_pull(task_ids='preprocess_payables', key='processed_payables')
    
    df1 = pd.read_json(receivables_json)
    df2 = pd.read_json(payables_json)
    
    try:
        client = MongoClient("mongodb://localhost:27017/")  # Update with your connection string
        db = client['financial_data']  # Database name
        
        # Convert DataFrames to dictionaries
        receivables_records = df1.to_dict('records')
        payables_records = df2.to_dict('records')
        
        # Insert data into collections
        db['receivables'].insert_many(receivables_records)
        db['payables'].insert_many(payables_records)
        
        logging.info("Data successfully saved to MongoDB")
    except Exception as e:
        logging.error(f"Failed to save data to MongoDB: {e}")
        raise
    finally:
        if 'client' in locals():
            client.close()

# Define DAG
with DAG(
    dag_id="financial_data_pipeline",
    start_date=datetime(2023, 10, 1),
    schedule_interval="@daily",
    catchup=False,
) as dag:

    check_connection_to_postgres = PythonOperator(
        task_id="check_connection_to_postgres",
        python_callable=test_connection_postgres,   
    )

    check_connection_to_mongodb = PythonOperator(
        task_id="check_connection_to_mongodb",
        python_callable=test_connection_mongodb,
    )

    fetch_receivables = PythonOperator(
        task_id="fetch_receivables_data",
        python_callable=fetch_receivables_data,
    )

    fetch_customers = PythonOperator(
        task_id="fetch_customers_data",
        python_callable=fetch_customers_data,
    )

    fetch_payables = PythonOperator(
        task_id="fetch_payables_data",
        python_callable=fetch_payables_data,
    )

    fetch_suppliers = PythonOperator(
        task_id="fetch_suppliers_data",
        python_callable=fetch_suppliers_data,
    )

    preprocess_receivables_task = PythonOperator(
        task_id="preprocess_receivables",
        python_callable=preprocess_receivables,
    )

    preprocess_payables_task = PythonOperator(
        task_id="preprocess_payables",
        python_callable=preprocess_payables,
    )

    save_data = PythonOperator(
        task_id="save_to_mongodb",
        python_callable=save_to_mongodb,
    )

    # Define task dependencies
    [check_connection_to_postgres, check_connection_to_mongodb] >> fetch_receivables
    [check_connection_to_postgres, check_connection_to_mongodb] >> fetch_customers
    [check_connection_to_postgres, check_connection_to_mongodb] >> fetch_payables
    [check_connection_to_postgres, check_connection_to_mongodb] >> fetch_suppliers
    
    [fetch_receivables, fetch_customers] >> preprocess_receivables_task
    [fetch_payables, fetch_suppliers] >> preprocess_payables_task
    
    [preprocess_receivables_task, preprocess_payables_task] >> save_data
